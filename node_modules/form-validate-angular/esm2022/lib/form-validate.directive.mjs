import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class FormValidateDirective {
    constructor(el) {
        this.el = el;
        this.customValidateMessage = true;
    }
    keyupOrSubmit(event) {
        this.checkValidation();
    }
    checkValidation() {
        for (let child in this.el.nativeElement.elements) {
            const childElement = this.el.nativeElement.elements[child];
            if (childElement.validity !== undefined) {
                const elName = "[name=" + childElement.name + "] + div";
                let divEl;
                if (childElement.name !== "") {
                    divEl = document.querySelector(elName);
                }
                if (!childElement.validity.valid) {
                    if (this.customValidateMessage && divEl !== null)
                        divEl.innerHTML = childElement.validationMessage;
                    childElement.classList.add("is-invalid");
                    //childElement.classList.remove("is-valid");
                }
                else {
                    //childElement.classList.add("is-valid");
                    childElement.classList.remove("is-invalid");
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: FormValidateDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.3", type: FormValidateDirective, isStandalone: true, selector: "[formValidate]", inputs: { customValidateMessage: "customValidateMessage" }, host: { listeners: { "keyup": "keyupOrSubmit($event)", "submit": "keyupOrSubmit($event)", "change": "keyupOrSubmit($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: FormValidateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[formValidate]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { customValidateMessage: [{
                type: Input,
                args: ["customValidateMessage"]
            }], keyupOrSubmit: [{
                type: HostListener,
                args: ["keyup", ["$event"]]
            }, {
                type: HostListener,
                args: ["submit", ["$event"]]
            }, {
                type: HostListener,
                args: ["change", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS12YWxpZGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9teS1saWIvc3JjL2xpYi9mb3JtLXZhbGlkYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNFLE1BQU0sT0FBTyxxQkFBcUI7SUFHaEMsWUFDVSxFQUErQjtRQUEvQixPQUFFLEdBQUYsRUFBRSxDQUE2QjtRQUZULDBCQUFxQixHQUFZLElBQUksQ0FBQztJQUdsRSxDQUFDO0lBTUwsYUFBYSxDQUFDLEtBQW9CO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsZUFBZTtRQUNiLEtBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFDO1lBQzlDLE1BQU0sWUFBWSxHQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUM5RCxJQUFHLFlBQVksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFDO2dCQUNuQyxNQUFNLE1BQU0sR0FBTyxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQzVELElBQUksS0FBVyxDQUFDO2dCQUVoQixJQUFHLFlBQVksQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFDO29CQUMxQixLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDeEM7Z0JBRUYsSUFBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFDO29CQUM5QixJQUFHLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLEtBQUssSUFBSTt3QkFDN0MsS0FBSyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUM7b0JBRXBELFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUN6Qyw0Q0FBNEM7aUJBQzVDO3FCQUFJO29CQUNKLHlDQUF5QztvQkFDekMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQzVDO2FBQ0g7U0FDRjtJQUNILENBQUM7OEdBdENVLHFCQUFxQjtrR0FBckIscUJBQXFCOzsyRkFBckIscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjsrRUFHaUMscUJBQXFCO3NCQUFwRCxLQUFLO3VCQUFDLHVCQUF1QjtnQkFTOUIsYUFBYTtzQkFIWixZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7c0JBQ2hDLFlBQVk7dUJBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOztzQkFDakMsWUFBWTt1QkFBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2Zvcm1WYWxpZGF0ZV0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0ZURpcmVjdGl2ZSB7XHJcblxyXG4gIEBJbnB1dChcImN1c3RvbVZhbGlkYXRlTWVzc2FnZVwiKSBjdXN0b21WYWxpZGF0ZU1lc3NhZ2U6IGJvb2xlYW4gPSB0cnVlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MRm9ybUVsZW1lbnQ+XHJcbiAgKSB7IH1cclxuXHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoXCJrZXl1cFwiLCBbXCIkZXZlbnRcIl0pXHJcbiAgQEhvc3RMaXN0ZW5lcihcInN1Ym1pdFwiLCBbXCIkZXZlbnRcIl0pXHJcbiAgQEhvc3RMaXN0ZW5lcihcImNoYW5nZVwiLCBbXCIkZXZlbnRcIl0pXHJcbiAga2V5dXBPclN1Ym1pdChldmVudDogS2V5Ym9hcmRFdmVudCl7XHJcbiAgICB0aGlzLmNoZWNrVmFsaWRhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tWYWxpZGF0aW9uKCl7XHJcbiAgICBmb3IobGV0IGNoaWxkIGluIHRoaXMuZWwubmF0aXZlRWxlbWVudC5lbGVtZW50cyl7XHJcbiAgICAgIGNvbnN0IGNoaWxkRWxlbWVudDphbnkgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZWxlbWVudHNbY2hpbGRdICAgICAgXHJcbiAgICAgIGlmKGNoaWxkRWxlbWVudC52YWxpZGl0eSAhPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgIGNvbnN0IGVsTmFtZTphbnkgPSBcIltuYW1lPVwiICsgY2hpbGRFbGVtZW50Lm5hbWUgKyBcIl0gKyBkaXZcIjsgICAgICAgICAgXHJcbiAgICAgICAgICBsZXQgZGl2RWwgOiBhbnk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGNoaWxkRWxlbWVudC5uYW1lICE9PSBcIlwiKXsgICBcclxuICAgICAgICAgICAgZGl2RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsTmFtZSk7XHJcbiAgICAgICAgICB9ICAgICAgICAgXHJcbiAgICAgICAgICBcclxuICAgICAgICAgaWYoIWNoaWxkRWxlbWVudC52YWxpZGl0eS52YWxpZCl7ICAgXHJcbiAgICAgICAgICAgaWYodGhpcy5jdXN0b21WYWxpZGF0ZU1lc3NhZ2UgJiYgZGl2RWwgIT09IG51bGwpICAgICAgXHJcbiAgICAgICAgICAgICBkaXZFbC5pbm5lckhUTUwgPSBjaGlsZEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNoaWxkRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtaW52YWxpZFwiKTtcclxuICAgICAgICAgIC8vY2hpbGRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy12YWxpZFwiKTtcclxuICAgICAgICAgfWVsc2V7ICAgICAgICAgIFxyXG4gICAgICAgICAgLy9jaGlsZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzLXZhbGlkXCIpO1xyXG4gICAgICAgICAgY2hpbGRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1pbnZhbGlkXCIpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0iXX0=