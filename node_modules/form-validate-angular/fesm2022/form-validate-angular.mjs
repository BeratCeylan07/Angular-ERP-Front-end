import * as i0 from '@angular/core';
import { Directive, Input, HostListener } from '@angular/core';

class FormValidateDirective {
    constructor(el) {
        this.el = el;
        this.customValidateMessage = true;
    }
    keyupOrSubmit(event) {
        this.checkValidation();
    }
    checkValidation() {
        for (let child in this.el.nativeElement.elements) {
            const childElement = this.el.nativeElement.elements[child];
            if (childElement.validity !== undefined) {
                const elName = "[name=" + childElement.name + "] + div";
                let divEl;
                if (childElement.name !== "") {
                    divEl = document.querySelector(elName);
                }
                if (!childElement.validity.valid) {
                    if (this.customValidateMessage && divEl !== null)
                        divEl.innerHTML = childElement.validationMessage;
                    childElement.classList.add("is-invalid");
                    //childElement.classList.remove("is-valid");
                }
                else {
                    //childElement.classList.add("is-valid");
                    childElement.classList.remove("is-invalid");
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: FormValidateDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.3", type: FormValidateDirective, isStandalone: true, selector: "[formValidate]", inputs: { customValidateMessage: "customValidateMessage" }, host: { listeners: { "keyup": "keyupOrSubmit($event)", "submit": "keyupOrSubmit($event)", "change": "keyupOrSubmit($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: FormValidateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[formValidate]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { customValidateMessage: [{
                type: Input,
                args: ["customValidateMessage"]
            }], keyupOrSubmit: [{
                type: HostListener,
                args: ["keyup", ["$event"]]
            }, {
                type: HostListener,
                args: ["submit", ["$event"]]
            }, {
                type: HostListener,
                args: ["change", ["$event"]]
            }] } });

/*
 * Public API Surface of my-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FormValidateDirective };
//# sourceMappingURL=form-validate-angular.mjs.map
