import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
export class SwalPortalTargets {
    /**
     * Targets the modal close button block contents.
     */
    closeButton = {
        element: swal => swal.getCloseButton(),
        options: { showCloseButton: true }
    };
    /**
     * Targets the modal title block contents.
     */
    title = {
        element: swal => swal.getTitle(),
        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
        options: { title: ' ' }
    };
    /**
     * Targets the modal text block contents (that is another block inside the first content block, so you can still
     * use other modal features like Swal inputs, that are situated inside that parent content block).
     */
    content = {
        element: swal => swal.getHtmlContainer(),
        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
        options: { text: ' ' }
    };
    /**
     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
     * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
     *     performance of everyone, for a relatively rare use case.
     */
    actions = {
        element: swal => swal.getActions(),
        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.
        options: { showConfirmButton: true }
    };
    /**
     * Targets the confirm button contents, replacing the text inside it (not the button itself)
     */
    confirmButton = {
        element: swal => swal.getConfirmButton(),
        options: { showConfirmButton: true }
    };
    /**
     * Targets the deny button contents, replacing the text inside it (not the button itself)
     */
    denyButton = {
        element: swal => swal.getDenyButton(),
        options: { showDenyButton: true }
    };
    /**
     * Targets the cancel button contents, replacing the text inside it (not the button itself)
     */
    cancelButton = {
        element: swal => swal.getCancelButton(),
        options: { showCancelButton: true }
    };
    /**
     * Targets the modal footer contents.
     */
    footer = {
        element: swal => swal.getFooter(),
        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
        options: { footer: ' ' }
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SwalPortalTargets, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SwalPortalTargets, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SwalPortalTargets, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXN3ZWV0YWxlcnQyL3NyYy9saWIvc3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBUTNDOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8saUJBQWlCO0lBQzFCOztPQUVHO0lBQ2EsV0FBVyxHQUFxQjtRQUM1QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ3RDLE9BQU8sRUFBRSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUU7S0FDckMsQ0FBQztJQUVGOztPQUVHO0lBQ2EsS0FBSyxHQUFxQjtRQUN0QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2hDLDBGQUEwRjtRQUMxRixPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO0tBQzFCLENBQUM7SUFFRjs7O09BR0c7SUFDYSxPQUFPLEdBQXFCO1FBQ3hDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUN4QywwRkFBMEY7UUFDMUYsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtLQUN6QixDQUFDO0lBRUY7Ozs7OztPQU1HO0lBQ2EsT0FBTyxHQUFxQjtRQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2xDLDZHQUE2RztRQUM3RyxPQUFPLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUU7S0FDdkMsQ0FBQztJQUVGOztPQUVHO0lBQ2EsYUFBYSxHQUFxQjtRQUM5QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7UUFDeEMsT0FBTyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFO0tBQ3ZDLENBQUM7SUFFRjs7T0FFRztJQUNhLFVBQVUsR0FBcUI7UUFDM0MsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNyQyxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFO0tBQ3BDLENBQUM7SUFFRjs7T0FFRztJQUNhLFlBQVksR0FBcUI7UUFDN0MsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUN2QyxPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7S0FDdEMsQ0FBQztJQUVGOztPQUVHO0lBQ2EsTUFBTSxHQUFxQjtRQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2pDLDBGQUEwRjtRQUMxRixPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0tBQzNCLENBQUM7dUdBeEVPLGlCQUFpQjsyR0FBakIsaUJBQWlCLGNBREosTUFBTTs7MkZBQ25CLGlCQUFpQjtrQkFEN0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2FsUG9ydGFsVGFyZ2V0IHtcbiAgICBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnM7XG4gICAgZWxlbWVudChzd2FsOiB0eXBlb2YgU3dhbCk6IEhUTUxFbGVtZW50IHwgbnVsbDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9iamVjdCBvZiB0YXJnZXRzIGZvciA8c3dhbD4gcG9ydGFscyAodXNlIHdpdGggKnN3YWxQb3J0YWwgZGlyZWN0aXZlKS5cbiAqIFdlIG11c3QgdXNlIHRodW5rcyB0byBhY2Nlc3MgdGhlIFN3YWwuKiBmdW5jdGlvbnMgbGlzdGVkIGJlbG93LCBiZWNhdXNlIHRoZXkgZ2V0IGNyZWF0ZWQgYWZ0ZXIgdGhlIGZpcnN0IG1vZGFsIGlzXG4gKiBzaG93biwgc28gdGhpcyBvYmplY3QgbGV0cyB1cyByZWZlcmVuY2UgdGhvc2UgZnVuY3Rpb25zIHNhZmVseSBhbmQgaW4gYSBzdGF0aWNhbGx5LXR5cGVkIG1hbm5lci5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBTd2FsUG9ydGFsVGFyZ2V0cyB7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgY2xvc2UgYnV0dG9uIGJsb2NrIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjbG9zZUJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENsb3NlQnV0dG9uKCksXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgdGl0bGUgYmxvY2sgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHRpdGxlOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0VGl0bGUoKSxcbiAgICAgICAgLy8gRW1wdHkgdGV4dCB0aGF0IHdpbGwgbmV2ZXIgYmUgc2hvd24gYnV0IG5lY2Vzc2FyeSBzbyBTd2VldEFsZXJ0MiBtYWtlcyB0aGUgZGl2IHZpc2libGUuXG4gICAgICAgIG9wdGlvbnM6IHsgdGl0bGU6ICcgJyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIHRleHQgYmxvY2sgY29udGVudHMgKHRoYXQgaXMgYW5vdGhlciBibG9jayBpbnNpZGUgdGhlIGZpcnN0IGNvbnRlbnQgYmxvY2ssIHNvIHlvdSBjYW4gc3RpbGxcbiAgICAgKiB1c2Ugb3RoZXIgbW9kYWwgZmVhdHVyZXMgbGlrZSBTd2FsIGlucHV0cywgdGhhdCBhcmUgc2l0dWF0ZWQgaW5zaWRlIHRoYXQgcGFyZW50IGNvbnRlbnQgYmxvY2spLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjb250ZW50OiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0SHRtbENvbnRhaW5lcigpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyB0ZXh0OiAnICcgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBhY3Rpb25zIGJsb2NrIGNvbnRlbnRzLCB3aGVyZSBhcmUgdGhlIGNvbmZpcm0gYW5kIGNhbmNlbCBidXR0b25zIGluIGEgbm9ybWFsIHRpbWUuXG4gICAgICogLyFcXCBXQVJOSU5HOiB1c2luZyB0aGlzIHRhcmdldCBkZXN0cm95cyBzb21lIG9mIHRoZSBuYXRpdmUgU3dlZXRBbGVydDIgbW9kYWwncyBET00sIHRoZXJlZm9yZSwgaWYgeW91IHVzZSB0aGlzXG4gICAgICogICAgIHRhcmdldCwgZG8gbm90IHVwZGF0ZSB0aGUgbW9kYWwgdmlhIDxzd2FsPiBASW5wdXRzIHdoaWxlIHRoZSBtb2RhbCBpcyBvcGVuLCBvciB5b3UnbGwgZ2V0IGFuIGVycm9yLlxuICAgICAqICAgICBXZSBjb3VsZCB3b3JrYXJvdW5kIHRoYXQgaW5jb252ZW5pZW50IGluc2lkZSB0aGlzIGludGVncmF0aW9uLCBidXQgdGhhdCdkIGJlIGRldHJpbWVudGFsIHRvIG1lbW9yeSBhbmRcbiAgICAgKiAgICAgcGVyZm9ybWFuY2Ugb2YgZXZlcnlvbmUsIGZvciBhIHJlbGF0aXZlbHkgcmFyZSB1c2UgY2FzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYWN0aW9uczogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldEFjdGlvbnMoKSxcbiAgICAgICAgLy8gVGhlIGJ1dHRvbiB3aWxsIG5ldmVyIGV4aXN0LCBidXQgU3dlZXRBbGVydDIgc2hvd3MgdGhlIGFjdGlvbnMgYmxvY2sgb25seSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgYnV0dG9uLlxuICAgICAgICBvcHRpb25zOiB7IHNob3dDb25maXJtQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgY29uZmlybSBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlybUJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENvbmZpcm1CdXR0b24oKSxcbiAgICAgICAgb3B0aW9uczogeyBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGRlbnkgYnV0dG9uIGNvbnRlbnRzLCByZXBsYWNpbmcgdGhlIHRleHQgaW5zaWRlIGl0IChub3QgdGhlIGJ1dHRvbiBpdHNlbGYpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGRlbnlCdXR0b246IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXREZW55QnV0dG9uKCksXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0RlbnlCdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBjYW5jZWwgYnV0dG9uIGNvbnRlbnRzLCByZXBsYWNpbmcgdGhlIHRleHQgaW5zaWRlIGl0IChub3QgdGhlIGJ1dHRvbiBpdHNlbGYpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbmNlbEJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENhbmNlbEJ1dHRvbigpLFxuICAgICAgICBvcHRpb25zOiB7IHNob3dDYW5jZWxCdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCBmb290ZXIgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGZvb3RlcjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldEZvb3RlcigpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyBmb290ZXI6ICcgJyB9XG4gICAgfTtcbn1cbiJdfQ==