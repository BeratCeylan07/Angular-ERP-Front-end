import { Inject, Injectable } from '@angular/core';
import { swalProviderToken } from './di';
import * as i0 from "@angular/core";
export class SweetAlert2LoaderService {
    swalProvider;
    swalPromiseCache;
    // Using any because Angular metadata generator does not understand a pure TS type here
    constructor(swalProvider) {
        this.swalProvider = swalProvider;
    }
    get swal() {
        if (!this.swalPromiseCache) {
            this.preloadSweetAlertLibrary();
        }
        return this.swalPromiseCache;
    }
    preloadSweetAlertLibrary() {
        if (this.swalPromiseCache)
            return;
        const libPromise = isLoader(this.swalProvider)
            ? this.swalProvider()
            : Promise.resolve(this.swalProvider);
        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);
        function isLoader(value) {
            return typeof value === 'function' && value.version === undefined;
        }
        function isDefaultExport(value) {
            return typeof value === 'function';
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SweetAlert2LoaderService, deps: [{ token: swalProviderToken }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SweetAlert2LoaderService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.5", ngImport: i0, type: SweetAlert2LoaderService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [swalProviderToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDItbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3dlZXRhbGVydDIvc3JjL2xpYi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBU3pDLE1BQU0sT0FBTyx3QkFBd0I7SUFDaEIsWUFBWSxDQUFlO0lBRXBDLGdCQUFnQixDQUErQjtJQUV2RCx1RkFBdUY7SUFDdkYsWUFBOEMsWUFBaUI7UUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDbkM7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBaUIsQ0FBQztJQUNsQyxDQUFDO0lBRU0sd0JBQXdCO1FBQzNCLElBQUksSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU87UUFFbEMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDMUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRyxTQUFTLFFBQVEsQ0FBQyxLQUFtQjtZQUNqQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSyxLQUFhLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQztRQUMvRSxDQUFDO1FBRUQsU0FBUyxlQUFlLENBQUMsS0FBaUI7WUFDdEMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7UUFDdkMsQ0FBQztJQUNMLENBQUM7dUdBbENRLHdCQUF3QixrQkFNTixpQkFBaUI7MkdBTm5DLHdCQUF3Qjs7MkZBQXhCLHdCQUF3QjtrQkFEcEMsVUFBVTs7MEJBT2EsTUFBTTsyQkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBTd2FsRGVmYXVsdCwgKiBhcyBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IHN3YWxQcm92aWRlclRva2VuIH0gZnJvbSAnLi9kaSc7XG5cbmV4cG9ydCB0eXBlIFN3YWxNb2R1bGUgPSB0eXBlb2YgU3dhbERlZmF1bHQgfCB0eXBlb2YgU3dhbDtcblxuZXhwb3J0IHR5cGUgU3dhbFByb3ZpZGVyID0gU3dhbE1vZHVsZUxvYWRlciB8IFN3YWxNb2R1bGU7XG5cbmV4cG9ydCB0eXBlIFN3YWxNb2R1bGVMb2FkZXIgPSAoKSA9PiBQcm9taXNlPFN3YWxNb2R1bGU+O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN3YWxQcm92aWRlcjogU3dhbFByb3ZpZGVyO1xuXG4gICAgcHJpdmF0ZSBzd2FsUHJvbWlzZUNhY2hlPzogUHJvbWlzZTx0eXBlb2YgU3dhbERlZmF1bHQ+O1xuXG4gICAgLy8gVXNpbmcgYW55IGJlY2F1c2UgQW5ndWxhciBtZXRhZGF0YSBnZW5lcmF0b3IgZG9lcyBub3QgdW5kZXJzdGFuZCBhIHB1cmUgVFMgdHlwZSBoZXJlXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKEBJbmplY3Qoc3dhbFByb3ZpZGVyVG9rZW4pIHN3YWxQcm92aWRlcjogYW55KSB7XG4gICAgICAgIHRoaXMuc3dhbFByb3ZpZGVyID0gc3dhbFByb3ZpZGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc3dhbCgpOiBQcm9taXNlPHR5cGVvZiBTd2FsRGVmYXVsdD4ge1xuICAgICAgICBpZiAoIXRoaXMuc3dhbFByb21pc2VDYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkU3dlZXRBbGVydExpYnJhcnkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN3YWxQcm9taXNlQ2FjaGUhO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcmVsb2FkU3dlZXRBbGVydExpYnJhcnkoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnN3YWxQcm9taXNlQ2FjaGUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBsaWJQcm9taXNlID0gaXNMb2FkZXIodGhpcy5zd2FsUHJvdmlkZXIpXG4gICAgICAgICAgICA/IHRoaXMuc3dhbFByb3ZpZGVyKClcbiAgICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuc3dhbFByb3ZpZGVyKTtcblxuICAgICAgICB0aGlzLnN3YWxQcm9taXNlQ2FjaGUgPSBsaWJQcm9taXNlLnRoZW4odmFsdWUgPT4gaXNEZWZhdWx0RXhwb3J0KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUuZGVmYXVsdCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNMb2FkZXIodmFsdWU6IFN3YWxQcm92aWRlcik6IHZhbHVlIGlzIFN3YWxNb2R1bGVMb2FkZXIge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAodmFsdWUgYXMgYW55KS52ZXJzaW9uID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0RlZmF1bHRFeHBvcnQodmFsdWU6IFN3YWxNb2R1bGUpOiB2YWx1ZSBpcyB0eXBlb2YgU3dhbERlZmF1bHQge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==